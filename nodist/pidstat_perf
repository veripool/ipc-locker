#!/usr/bin/perl -w
# See copyright, etc in below POD section.
######################################################################
use lib './blib/lib';	# testing
use lib "/tmp/build-ice9/site_perl";   # Blizzard

require 5.006_001;
use Getopt::Long;
#use Data::Dumper; $Data::Dumper::Indent=1; #Debug
use IPC::PidStat;
use IPC::Locker;
use Pod::Usage;
use Time::HiRes;
use Sys::Hostname;
use IO::Poll;
use strict;
use vars qw ($Debug);

#======================================================================

our $Opt_Host = IPC::Locker::hostfqdn();
our $Opt_Pid = $$;
our $Opt_PerSec = 10;
our $Opt_Runtime   = 10;
our $Opt_StartMinute;
our $Opt_Comment = "";

#======================================================================
# main

autoflush STDOUT 1;
autoflush STDERR 1;
Getopt::Long::config ("no_auto_abbrev");
if (! GetOptions (
		  "help"	=> \&usage,
		  "debug"	=> sub { $Debug=1; $IPC::Locker::Debug = 1;},
		  "<>"		=> \&parameter,
		  "host=s"	=> \$Opt_Host,
		  "pid=i"	=> \$Opt_Pid,
		  "persec=i"	=> \$Opt_PerSec,
		  "runtime=i"	=> \$Opt_Runtime,
		  "startminute=i"	=> \$Opt_StartMinute,
		  "comment=s"	=> \$Opt_Comment,
		  )) {
    die "%Error: Bad usage, try 'pidstat_perf --help'\n";
}

srand();
if (defined $Opt_StartMinute) {
    while (1) {
	my ($sec,$min,$hour) = localtime();
	last if $min == $Opt_StartMinute;
    }
}

Time::HiRes::usleep (rand() * 1e6);
print "Start\n" if $Debug;
perf();
print "End\n" if $Debug;

#----------------------------------------------------------------------

sub usage {
    pod2usage(-verbose=>2, -exitval=>2, -output=>\*STDOUT);
    exit (1);
}

sub parameter {
    my $param = shift;
    die "%Error: Unknown parameter: $param\n";
}

#######################################################################

sub perf {
    my $st_time = fractime();

    my $reqs = 0;
    my $rtns = 0;
    my $tooslow;

    my $exister = IPC::PidStat->new ();

    my $poll = IO::Poll->new();
    $poll->mask($exister->fh => (POLLIN | POLLERR | POLLHUP | POLLNVAL));

    for (my $loops = 0; $loops < $Opt_Runtime; $loops++) {
	print "  Second loop\n" if $Debug;
	for (my $persec=0; $persec < $Opt_PerSec; $persec++) {
	    my $loop_start = fractime();

	    $exister->pid_request(host=>$Opt_Host, pid=>$Opt_Pid);
	    $reqs++;

	    my $traffic = 1;
	    while ($traffic) {
		$traffic = 0;

		$! = 0;
		my $npolled = $poll->poll(0.01);
		if ($npolled>=0) {
		    my @r = $poll->handles(POLLIN);
		    if ($r[0]) {
			print "    Traffic\n" if $Debug;
			$traffic = 1;
			my ($pid,$exists,$onhost) = $exister->recv_stat();
			$rtns++ if defined $pid;
			print "    Traffic done\n" if $Debug;
		    }
		}
	    }

	    my $loop_end = fractime();
	    my $sec_sleep = ((1/$Opt_PerSec) - ($loop_end-$loop_start));
	    print "SS $sec_sleep\n" if $Debug;
	    Time::HiRes::usleep ($sec_sleep * 1e6) if $sec_sleep > 0;
	    $tooslow = 1 if $sec_sleep < 0;
	}
    }

    my $delta_time = fractime() - $st_time;

    my $note = "";
    $note = "May have had too much backpressure" if $tooslow;
    printf "%s, %5.3f, %5.3f, %s, %s\n", '"'.hostname().'"', $reqs/$delta_time, $rtns/$delta_time, '"'.$Opt_Comment.'"', '"'.$note.'"';
}

sub fractime {
    my ($time, $time_usec) = Time::HiRes::gettimeofday();
    return $time + $time_usec * 1e-6;
}

#######################################################################
__END__

=pod

=head1 NAME

pidstat_perf -

=head1 SYNOPSIS

cd /tmp
salloc -p scx-comp -N 100 bash
sbcast -f ~/SandBox/homecvs/perltools/IPC-Locker/nodist/pidstat_perf /tmp/pidstat_perf
date
echo "---" >> ~/d/perfbliz
srun /tmp/pidstat_perf --host 10.4.0.28 --comment 800 --startminute 47 >> ~/d/perfbliz
echo "---" >> ~/d/perfbliz
srun /tmp/pidstat_perf --host 10.4.0.28 --comment 800 --persec 25 --startminute 44 >> ~/d/perfbliz

=head1 DESCRIPTION

dd

=head1 ARGUMENTS

=over 4

=item --comment

Arbitrary string to add to output; generally the number of CPUs or other
slurm characteristic.

=item --help

Displays this message and program version and exits.

=item --host

Hostname to ping.

=item --persec

Requests per second to launch.

=item --pid

PID to ping.

=item --runtime

Number of seconds to run for.

=item --startminute

Minute-hand time to start at, to insure all jobs are simultanious.

=back

=head1 DISTRIBUTION

The latest version is available from CPAN and from L<http://www.veripool.org/>.

Copyright 2008-2012 by Wilson Snyder.  This package is free software; you
can redistribute it and/or modify it under the terms of either the GNU
Lesser General Public License Version 3 or the Perl Artistic License Version 2.0.

=head1 AUTHORS

Wilson Snyder <wsnyder@wsnyder.org>

=head1 SEE ALSO

=cut

######################################################################
### Local Variables:
### compile-command: "./pidstat_perf "
### End:
