#!/usr/bin/perl -w
# $Id$
######################################################################
#
# Copyright 2005-2007 by Jeff Dutton <jdutton@cpan.org>.  This program is
# free software; you can redistribute it and/or modify it under
# the terms of either the GNU Lesser General Public License or the Perl
# Artistic License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#                                                                           
######################################################################

use IO::Handle;
use Getopt::Long;
use Cwd qw();

use strict;
use vars qw(@CmdParts);

#======================================================================
# main

my $Opt_Cd;
my @Opt_Param;
my $Opt_Shell = "/bin/sh -c";

autoflush STDOUT;
autoflush STDERR;

Getopt::Long::config ("no_auto_abbrev","require_order");
if (! GetOptions (
		  "help"	=> \&usage,
		  "cd=s"	=> \$Opt_Cd,
		  "shell=s"	=> \$Opt_Shell,
		  )) {
    die "%Error: Bad usage, try 'uriexec --help'\n";
}
my @opt_cmd = @ARGV;
$#opt_cmd >= 0 or die "%Error: uriexec: No command specified, see 'uriexec --help'\n";

push (@Opt_Param, @ARGV); # Any remaining arguments (i.e. after a -- on the command line)
@Opt_Param or die "%Error: uriexec: No command argument was specified\n";

if ($Opt_Cd) {
    my $dir = uri_decode($Opt_Cd);
    Cwd::chdir($dir)
	or die "%Error: uriexec: Could not chdir to \"$dir\"\n";
}

# Decode all arguments and exec them.
my $shell = uri_decode($Opt_Shell);
my $cmd = uri_decode(join(' ', @Opt_Param));
my @cmds = (split(' ',$shell), $cmd);
exec(@cmds);
die "%Error: uriexec: exec failed: '".join(' ',@cmds),"\n";

#----------------------------------------------------------------------

sub usage {
    eval 'use Pod::Usage;';
    print '$Id$\n';
    pod2usage(-verbose=>2, -exitval => 2);
    exit (1);
}

#######################################################################

sub uri_decode {
    my $str = shift;
    $str =~ tr/+/ /; # Plus encodes a space
    $str =~ s/%([a-fA-F0-9]{2,2})/chr(hex($1))/eg; # Decode the % encoding
    return $str;
}

#######################################################################
__END__

=pod

=head1 NAME

uriexec - Decode and execute the given URI-encoded command

=head1 SYNOPSIS

  uriexec [--cd I<cd>] echo %24HOME

=head1 DESCRIPTION

Run the specified command (optionally from the specified directory).  Each
URL-encoded character (%xx) is translated prior to executing the command
with exec().

Uriexec solves the classic problem of having to figure out how to quote
shell metacharacters to pass commands across multiple shells and ssh
processes.  Simply call "uriexec" on a string created with
C<URI::Escape::uri_escape>, and it will end up executing on the final
machine with proper quoting.

=head1 ARGUMENTS

=over 4

=item --cd I<dir>

Directory to cd to before the exec of the given command, URI-encoded.

=item --shell I<shell>

Name of the shell and additional parameters to prefix, URI-encoded.
Defaults to "/bin/sh -c".

=back

=head1 DISTRIBUTION

Copyright 2005-2007 by Jeff Dutton <jdutton@cpan.org>.  This program is
free software; you can redistribute it and/or modify it under the terms of
either the GNU Lesser General Public License or the Perl Artistic License.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
more details.

=head1 AUTHORS

Jeff Dutton <jdutton@cpan.org>, Wilson Snyder <wsnyder@wsnyder.org>

=head1 SEE ALSO

L<URI::Escape>, L<IPC::Locker>

=cut
